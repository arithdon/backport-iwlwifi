diff --git a/net/mac80211/Makefile b/net/mac80211/Makefile
index 3082aed7d055..ffbf12ff7afc 100644
--- a/net/mac80211/Makefile
+++ b/net/mac80211/Makefile
@@ -1,5 +1,5 @@
 # SPDX-License-Identifier: GPL-2.0
-obj-$(CPTCFG_MAC80211) += mac80211.o
+obj-$(CPTCFG_MAC80211) += iwl7000_mac80211.o
 
 # mac80211 objects
 mac80211-y := \
@@ -55,6 +55,9 @@ mac80211-$(CONFIG_PM) += pm.o
 CFLAGS_trace.o := -I$(src)
 subdir-ccflags-y += $(call cc-option,-Wimplicit-fallthrough)
 
+CFLAGS_tx.o += -include "hdrs/iwl-tx.h"
+CFLAGS_debugfs.o += -include "hdrs/net/fq.h"
+
 rc80211_minstrel-y := \
 	rc80211_minstrel.o \
 	rc80211_minstrel_ht.o
@@ -66,3 +69,7 @@ rc80211_minstrel-$(CPTCFG_MAC80211_DEBUGFS) += \
 mac80211-$(CPTCFG_MAC80211_RC_MINSTREL) += $(rc80211_minstrel-y)
 
 ccflags-y += -DDEBUG
+
+mac80211-y += backports.o cfg-utils.o reg.o
+
+iwl7000_mac80211-objs := $(mac80211-objs) $(mac80211-y)
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 5adddffc616e..e02ffd6d76e2 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -29,6 +29,7 @@ static void ieee80211_set_mu_mimo_follow(struct ieee80211_sub_if_data *sdata,
 	bool mu_mimo_groups = false;
 	bool mu_mimo_follow = false;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,12,0)
 	if (params->vht_mumimo_groups) {
 		u64 membership;
 
@@ -45,6 +46,7 @@ static void ieee80211_set_mu_mimo_follow(struct ieee80211_sub_if_data *sdata,
 		       WLAN_MEMBERSHIP_LEN);
 		mu_mimo_groups = membership != 0;
 	}
+#endif
 
 	if (params->vht_mumimo_follow_addr) {
 		mu_mimo_follow =
@@ -351,6 +353,7 @@ static int ieee80211_set_noack_map(struct wiphy *wiphy,
 	return 0;
 }
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 static int ieee80211_set_tx(struct ieee80211_sub_if_data *sdata,
 			    const u8 *mac_addr, u8 key_idx)
 {
@@ -380,6 +383,7 @@ static int ieee80211_set_tx(struct ieee80211_sub_if_data *sdata,
 	mutex_unlock(&local->key_mtx);
 	return ret;
 }
+#endif
 
 static int ieee80211_add_key(struct wiphy *wiphy, struct net_device *dev,
 			     u8 key_idx, bool pairwise, const u8 *mac_addr,
@@ -395,9 +399,10 @@ static int ieee80211_add_key(struct wiphy *wiphy, struct net_device *dev,
 	if (!ieee80211_sdata_running(sdata))
 		return -ENETDOWN;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	if (pairwise && params->mode == NL80211_KEY_SET_TX)
 		return ieee80211_set_tx(sdata, mac_addr, key_idx);
-
+#endif
 	/* reject WEP and TKIP keys if WEP failed to initialize */
 	switch (params->cipher) {
 	case WLAN_CIPHER_SUITE_WEP40:
@@ -428,9 +433,10 @@ static int ieee80211_add_key(struct wiphy *wiphy, struct net_device *dev,
 	if (pairwise)
 		key->conf.flags |= IEEE80211_KEY_FLAG_PAIRWISE;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	if (params->mode == NL80211_KEY_NO_TX)
 		key->conf.flags |= IEEE80211_KEY_FLAG_NO_AUTO_TX;
-
+#endif
 	mutex_lock(&local->sta_mtx);
 
 	if (mac_addr) {
@@ -727,8 +733,9 @@ void sta_set_rate_info_tx(struct sta_info *sta,
 }
 
 static int ieee80211_dump_station(struct wiphy *wiphy, struct net_device *dev,
-				  int idx, u8 *mac, struct station_info *sinfo)
+				  int idx, u8 *mac, cfg_station_info_t *cfginfo)
 {
+	struct station_info _sinfo = {}, *sinfo = &_sinfo;
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 	struct ieee80211_local *local = sdata->local;
 	struct sta_info *sta;
@@ -745,20 +752,27 @@ static int ieee80211_dump_station(struct wiphy *wiphy, struct net_device *dev,
 
 	mutex_unlock(&local->sta_mtx);
 
+	iwl7000_convert_sinfo(sinfo, cfginfo);
+
 	return ret;
 }
 
 static int ieee80211_dump_survey(struct wiphy *wiphy, struct net_device *dev,
-				 int idx, struct survey_info *survey)
+				 int idx, cfg_survey_info_t *cfgsurvey)
 {
 	struct ieee80211_local *local = wdev_priv(dev->ieee80211_ptr);
+	struct survey_info _survey = {}, *survey = &_survey;
+	int ret;
 
-	return drv_get_survey(local, idx, survey);
+	ret = drv_get_survey(local, idx, survey);
+	iwl7000_convert_survey_info(survey, cfgsurvey);
+	return ret;
 }
 
 static int ieee80211_get_station(struct wiphy *wiphy, struct net_device *dev,
-				 const u8 *mac, struct station_info *sinfo)
+				 const u8 *mac, cfg_station_info_t *cfginfo)
 {
+	struct station_info _sinfo = {}, *sinfo = &_sinfo;
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 	struct ieee80211_local *local = sdata->local;
 	struct sta_info *sta;
@@ -774,6 +788,8 @@ static int ieee80211_get_station(struct wiphy *wiphy, struct net_device *dev,
 
 	mutex_unlock(&local->sta_mtx);
 
+	iwl7000_convert_sinfo(sinfo, cfginfo);
+
 	return ret;
 }
 
@@ -1019,7 +1035,9 @@ static int ieee80211_start_ap(struct wiphy *wiphy, struct net_device *dev,
 			      IEEE80211_HE_OPERATION_RTS_THRESHOLD_MASK);
 		changed |= BSS_CHANGED_HE_OBSS_PD;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,7,0)
 		if (params->he_bss_color.enabled)
+#endif
 			changed |= BSS_CHANGED_HE_BSS_COLOR;
 	}
 
@@ -1066,9 +1084,13 @@ static int ieee80211_start_ap(struct wiphy *wiphy, struct net_device *dev,
 	sdata->vif.bss_conf.dtim_period = params->dtim_period;
 	sdata->vif.bss_conf.enable_beacon = true;
 	sdata->vif.bss_conf.allow_p2p_go_ps = sdata->vif.p2p;
+#if CFG80211_VERSION >= KERNEL_VERSION(5,5,0)
 	sdata->vif.bss_conf.twt_responder = params->twt_responder;
 	sdata->vif.bss_conf.he_obss_pd = params->he_obss_pd;
+#endif
+#if CFG80211_VERSION >= KERNEL_VERSION(5,7,0)
 	sdata->vif.bss_conf.he_bss_color = params->he_bss_color;
+#endif
 
 	sdata->vif.bss_conf.ssid_len = params->ssid_len;
 	if (params->ssid_len)
@@ -1085,6 +1107,7 @@ static int ieee80211_start_ap(struct wiphy *wiphy, struct net_device *dev,
 		sdata->vif.bss_conf.p2p_noa_attr.oppps_ctwindow |=
 					IEEE80211_P2P_OPPPS_ENABLE_BIT;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,8,0)
 	sdata->beacon_rate_set = false;
 	if (wiphy_ext_feature_isset(local->hw.wiphy,
 				    NL80211_EXT_FEATURE_BEACON_RATE_LEGACY)) {
@@ -1095,6 +1118,7 @@ static int ieee80211_start_ap(struct wiphy *wiphy, struct net_device *dev,
 				sdata->beacon_rate_set = true;
 		}
 	}
+#endif
 
 	err = ieee80211_assign_beacon(sdata, &params->beacon, NULL);
 	if (err < 0) {
@@ -1492,6 +1516,7 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 	if (params->listen_interval >= 0)
 		sta->listen_interval = params->listen_interval;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	if (params->sta_modify_mask & STATION_PARAM_APPLY_STA_TXPOWER) {
 		sta->sta.txpwr.type = params->txpwr.type;
 		if (params->txpwr.type == NL80211_TX_POWER_LIMITED)
@@ -1500,7 +1525,7 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 		if (ret)
 			return ret;
 	}
-
+#endif
 	if (params->supported_rates && params->supported_rates_len) {
 		ieee80211_parse_bitrates(&sdata->vif.bss_conf.chandef,
 					 sband, params->supported_rates,
@@ -1517,12 +1542,18 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 		ieee80211_vht_cap_ie_to_sta_vht_cap(sdata, sband,
 						    params->vht_capa, sta);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,19,0)
 	if (params->he_capa)
 		ieee80211_he_cap_ie_to_sta_he_cap(sdata, sband,
 						  (void *)params->he_capa,
 						  params->he_capa_len,
+#if CFG80211_VERSION >= KERNEL_VERSION(99,0,0)
 						  (void *)params->he_6ghz_capa,
+#else
+						  NULL,
+#endif
 						  sta);
+#endif
 
 	if (params->opmode_notif_used) {
 		/* returned value is only needed for rc update, but the
@@ -1538,9 +1569,10 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 	if (ieee80211_vif_is_mesh(&sdata->vif))
 		sta_apply_mesh_params(local, sta, params);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	if (params->airtime_weight)
 		sta->airtime_weight = params->airtime_weight;
-
+#endif
 	/* set the STA state after all sta info from usermode has been set */
 	if (test_sta_flag(sta, WLAN_STA_TDLS_PEER) ||
 	    set & BIT(NL80211_STA_FLAG_ASSOCIATED)) {
@@ -2007,6 +2039,7 @@ static int copy_mesh_setup(struct ieee80211_if_mesh *ifmsh,
 	sdata->vif.bss_conf.beacon_int = setup->beacon_interval;
 	sdata->vif.bss_conf.dtim_period = setup->dtim_period;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,8,0)
 	sdata->beacon_rate_set = false;
 	if (wiphy_ext_feature_isset(sdata->local->hw.wiphy,
 				    NL80211_EXT_FEATURE_BEACON_RATE_LEGACY)) {
@@ -2017,6 +2050,7 @@ static int copy_mesh_setup(struct ieee80211_if_mesh *ifmsh,
 				sdata->beacon_rate_set = true;
 		}
 	}
+#endif
 
 	return 0;
 }
@@ -3818,6 +3852,7 @@ static int ieee80211_set_multicast_to_unicast(struct wiphy *wiphy,
 	return 0;
 }
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,0)
 void ieee80211_fill_txq_stats(struct cfg80211_txq_stats *txqstats,
 			      struct txq_info *txqi)
 {
@@ -3910,6 +3945,7 @@ out:
 
 	return ret;
 }
+#endif /* CFG80211_VERSION >= KERNEL_VERSION(4,18,0) */
 
 static int
 ieee80211_get_ftm_responder_stats(struct wiphy *wiphy,
@@ -4092,7 +4128,9 @@ const struct cfg80211_ops mac80211_config_ops = {
 	.del_nan_func = ieee80211_del_nan_func,
 	.set_multicast_to_unicast = ieee80211_set_multicast_to_unicast,
 	.tx_control_port = ieee80211_tx_control_port,
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,0)
 	.get_txq_stats = ieee80211_get_txq_stats,
+#endif
 	.get_ftm_responder_stats = ieee80211_get_ftm_responder_stats,
 	.start_pmsr = ieee80211_start_pmsr,
 	.abort_pmsr = ieee80211_abort_pmsr,
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index 1d0e761092a6..2539109900a6 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1132,12 +1132,31 @@ enum mac80211_scan_state {
 	SCAN_ABORT,
 };
 
+#if CFG80211_VERSION < KERNEL_VERSION(4,0,0)
+/* private copy of a cfg80211 structure */
+struct cfg80211_registered_device {
+	struct list_head list;
+
+	/*
+	 * the driver requests the regulatory core to set this regulatory
+	 * domain as the wiphy's. Only used for %REGULATORY_WIPHY_SELF_MANAGED
+	 * devices using the regulatory_set_wiphy_regd() API
+	 */
+	const struct ieee80211_regdomain *requested_regd;
+};
+#endif /* CFG80211_VERSION < KERNEL_VERSION(4,0,0) */
+
 struct ieee80211_local {
 	/* embed the driver visible part.
 	 * don't cast (use the static inlines below), but we keep
 	 * it first anyway so they become a no-op */
 	struct ieee80211_hw hw;
 
+#if CFG80211_VERSION < KERNEL_VERSION(4,0,0)
+	/* used for internal mac80211 LAR implementation */
+	struct cfg80211_registered_device rdev;
+#endif /* CFG80211_VERSION < KERNEL_VERSION(4,0,0) */
+
 	struct fq fq;
 	struct codel_vars *cvars;
 	struct codel_params cparams;
@@ -1171,7 +1190,11 @@ struct ieee80211_local {
 	/* number of interfaces with corresponding FIF_ flags */
 	int fif_fcsfail, fif_plcpfail, fif_control, fif_other_bss, fif_pspoll,
 	    fif_probe_req;
+#if CFG80211_VERSION >= KERNEL_VERSION(5,8,0)
 	bool probe_req_reg;
+#else
+	unsigned int probe_req_reg;
+#endif
 	bool rx_mcast_action_reg;
 	unsigned int filter_flags; /* FIF_* */
 
@@ -2126,8 +2149,10 @@ void ieee80211_txq_purge(struct ieee80211_local *local,
 			 struct txq_info *txqi);
 void ieee80211_txq_remove_vlan(struct ieee80211_local *local,
 			       struct ieee80211_sub_if_data *sdata);
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,0)
 void ieee80211_fill_txq_stats(struct cfg80211_txq_stats *txqstats,
 			      struct txq_info *txqi);
+#endif /* CFG80211_VERSION >= KERNEL_VERSION(4,18,0) */
 void ieee80211_wake_txqs(unsigned long data);
 void ieee80211_send_auth(struct ieee80211_sub_if_data *sdata,
 			 u16 transaction, u16 auth_alg, u16 status,
@@ -2265,6 +2290,12 @@ enum nl80211_chan_width ieee80211_get_sta_bw(struct ieee80211_sta *sta);
 void ieee80211_recalc_chanctx_chantype(struct ieee80211_local *local,
 				       struct ieee80211_chanctx *ctx);
 
+#if CFG80211_VERSION < KERNEL_VERSION(4,0,0)
+/* LAR private implementation */
+void intel_regulatory_deregister(struct ieee80211_local *local);
+void intel_regulatory_register(struct ieee80211_local *local);
+#endif /* CFG80211_VERSION < KERNEL_VERSION(4,0,0) */
+
 /* TDLS */
 int ieee80211_tdls_mgmt(struct wiphy *wiphy, struct net_device *dev,
 			const u8 *peer, u8 action_code, u8 dialog_token,
diff --git a/net/mac80211/main.c b/net/mac80211/main.c
index a96ad0507d6f..53cf254f316d 100644
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -1169,6 +1169,7 @@ int ieee80211_register_hw(struct ieee80211_hw *hw)
 	if (ieee80211_hw_check(&local->hw, CHANCTX_STA_CSA))
 		local->ext_capa[0] |= WLAN_EXT_CAPA1_EXT_CHANNEL_SWITCHING;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,1,0)
 	/* mac80211 supports multi BSSID, if the driver supports it */
 	if (ieee80211_hw_check(&local->hw, SUPPORTS_MULTI_BSSID)) {
 		local->hw.wiphy->support_mbssid = true;
@@ -1179,6 +1180,7 @@ int ieee80211_register_hw(struct ieee80211_hw *hw)
 			local->ext_capa[2] |=
 				WLAN_EXT_CAPA3_MULTI_BSSID_SUPPORT;
 	}
+#endif
 
 	local->hw.wiphy->max_num_csa_counters = IEEE80211_MAX_CSA_COUNTERS_NUM;
 
@@ -1325,6 +1327,10 @@ int ieee80211_register_hw(struct ieee80211_hw *hw)
 		goto fail_ifa6;
 #endif
 
+#if CFG80211_VERSION < KERNEL_VERSION(4,0,0)
+	intel_regulatory_register(local);
+#endif /* CFG80211_VERSION < KERNEL_VERSION(4,0,0) */
+
 	return 0;
 
 #if IS_ENABLED(CONFIG_IPV6)
@@ -1435,6 +1441,10 @@ void ieee80211_free_hw(struct ieee80211_hw *hw)
 		kfree(local->hw.wiphy->bands[band]);
 	}
 
+#if CFG80211_VERSION < KERNEL_VERSION(4,0,0)
+	intel_regulatory_deregister(local);
+#endif /* CFG80211_VERSION < KERNEL_VERSION(4,0,0) */
+
 	wiphy_free(local->hw.wiphy);
 }
 EXPORT_SYMBOL(ieee80211_free_hw);
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index 92c217c72759..5c6eca3990f9 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -148,6 +148,9 @@ ieee80211_determine_chantype_6ghz(struct ieee80211_sub_if_data *sdata,
 				  const struct ieee80211_he_operation *he_oper,
 				  struct cfg80211_chan_def *chandef)
 {
+#if CFG80211_VERSION < KERNEL_VERSION(5,4,0)
+	WARN_ON(1); /* should never get here due to == 6GHZ check below */
+#else
 	struct ieee80211_if_managed *ifmgd = &sdata->u.mgd;
 	struct cfg80211_chan_def he_chandef = {};
 	const struct ieee80211_he_6ghz_oper *he_6ghz_oper;
@@ -225,6 +228,7 @@ ieee80211_determine_chantype_6ghz(struct ieee80211_sub_if_data *sdata,
 	}
 
 	*chandef = he_chandef;
+#endif /* CFG80211_VERSION < KERNEL_VERSION(5,4,0) */
 	return 0;
 }
 
@@ -780,6 +784,7 @@ static void ieee80211_add_he_6ghz_capa(struct ieee80211_sub_if_data *sdata,
 				       struct sk_buff *skb,
 				       struct ieee80211_supported_band *sband)
 {
+#if CFG80211_VERSION > KERNEL_VERSION(5,8,0)
 	const struct ieee80211_sband_iftype_data *data =
 		ieee80211_get_sband_iftype_data(sband, NL80211_IFTYPE_STATION);
 	u8 *pos;
@@ -816,6 +821,7 @@ static void ieee80211_add_he_6ghz_capa(struct ieee80211_sub_if_data *sdata,
 	}
 
 	put_unaligned_le16(cap, pos);
+#endif
 }
 
 static void ieee80211_send_assoc(struct ieee80211_sub_if_data *sdata)
@@ -3654,13 +3660,19 @@ static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata,
 		bss_conf->he_bss_color.partial =
 			le32_get_bits(elems->he_operation->he_oper_params,
 				      IEEE80211_HE_OPERATION_PARTIAL_BSS_COLOR);
+#if CFG80211_VERSION >= KERNEL_VERSION(5,7,0)
 		bss_conf->he_bss_color.enabled =
 			!le32_get_bits(elems->he_operation->he_oper_params,
 				       IEEE80211_HE_OPERATION_BSS_COLOR_DISABLED);
 
 		if (bss_conf->he_bss_color.enabled)
 			changed |= BSS_CHANGED_HE_BSS_COLOR;
-
+#else
+		bss_conf->he_bss_color.disabled =
+			le32_get_bits(elems->he_operation->he_oper_params,
+				      IEEE80211_HE_OPERATION_BSS_COLOR_DISABLED);
+		changed |= BSS_CHANGED_HE_BSS_COLOR;
+#endif
 		bss_conf->htc_trig_based_pkt_ext =
 			le32_get_bits(elems->he_operation->he_oper_params,
 			      IEEE80211_HE_OPERATION_DFLT_PE_DURATION_MASK);
@@ -3685,6 +3697,7 @@ static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata,
 		/* TODO: OPEN: what happens if BSS color disable is set? */
 	}
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,1,0)
 	if (cbss->transmitted_bss) {
 		bss_conf->nontransmitted = true;
 		ether_addr_copy(bss_conf->transmitter_bssid,
@@ -3692,6 +3705,7 @@ static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata,
 		bss_conf->bssid_indicator = cbss->max_bssid_indicator;
 		bss_conf->bssid_index = cbss->bssid_index;
 	}
+#endif
 
 	/*
 	 * Some APs, e.g. Netgear WNDR3700, report invalid HT operation data
@@ -3919,8 +3933,12 @@ static void ieee80211_rx_bss_info(struct ieee80211_sub_if_data *sdata,
 
 	sdata_assert_lock(sdata);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,8,0)
 	channel = ieee80211_get_channel_khz(local->hw.wiphy,
 					ieee80211_rx_status_to_khz(rx_status));
+#else
+	channel = ieee80211_get_channel(local->hw.wiphy, rx_status->freq);
+#endif
 	if (!channel)
 		return;
 
@@ -4098,9 +4116,13 @@ static bool ieee80211_rx_our_beacon(const u8 *tx_bssid,
 {
 	if (ether_addr_equal(tx_bssid, bss->bssid))
 		return true;
+#if CFG80211_VERSION >= KERNEL_VERSION(5,1,0)
 	if (!bss->transmitted_bss)
 		return false;
 	return ether_addr_equal(tx_bssid, bss->transmitted_bss->bssid);
+#else
+	return false;
+#endif
 }
 
 static void ieee80211_rx_mgmt_beacon(struct ieee80211_sub_if_data *sdata,
@@ -4136,8 +4158,12 @@ static void ieee80211_rx_mgmt_beacon(struct ieee80211_sub_if_data *sdata,
 		return;
 	}
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,8,0)
 	if (ieee80211_rx_status_to_khz(rx_status) !=
 	    ieee80211_channel_to_khz(chanctx_conf->def.chan)) {
+#else
+	if (rx_status->freq != chanctx_conf->def.chan->center_freq) {
+#endif
 		rcu_read_unlock();
 		return;
 	}
diff --git a/net/mac80211/rx.c b/net/mac80211/rx.c
index 9a67021d4504..a3a4d86094c9 100644
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -3151,10 +3151,16 @@ ieee80211_rx_h_mgmt_check(struct ieee80211_rx_data *rx)
 		    !(status->flag & RX_FLAG_NO_SIGNAL_VAL))
 			sig = status->signal;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,8,0)
 		cfg80211_report_obss_beacon_khz(rx->local->hw.wiphy,
 						rx->skb->data, rx->skb->len,
 						ieee80211_rx_status_to_khz(status),
 						sig);
+#else
+		cfg80211_report_obss_beacon(rx->local->hw.wiphy,
+					    rx->skb->data, rx->skb->len,
+					    status->freq, sig);
+#endif
 		rx->flags |= IEEE80211_RX_BEACON_REPORTED;
 	}
 
@@ -3487,9 +3493,14 @@ ieee80211_rx_h_userspace_mgmt(struct ieee80211_rx_data *rx)
 	    !(status->flag & RX_FLAG_NO_SIGNAL_VAL))
 		sig = status->signal;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,8,0)
 	if (cfg80211_rx_mgmt_khz(&rx->sdata->wdev,
 				 ieee80211_rx_status_to_khz(status), sig,
 				 rx->skb->data, rx->skb->len, 0)) {
+#else
+		if (cfg80211_rx_mgmt(&rx->sdata->wdev, status->freq, sig,
+				     rx->skb->data, rx->skb->len, 0)) {
+#endif
 		if (rx->sta)
 			rx->sta->rx_stats.packets++;
 		dev_kfree_skb(rx->skb);
diff --git a/net/mac80211/scan.c b/net/mac80211/scan.c
index 3ae085db0e28..c50b8c5c5711 100644
--- a/net/mac80211/scan.c
+++ b/net/mac80211/scan.c
@@ -214,12 +214,14 @@ ieee80211_bss_info_update(struct ieee80211_local *local,
 	bss = (void *)cbss->priv;
 	ieee80211_update_bss_from_elems(local, bss, &elems, rx_status, beacon);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,1,0)
 	list_for_each_entry(non_tx_cbss, &cbss->nontrans_list, nontrans_list) {
 		non_tx_bss = (void *)non_tx_cbss->priv;
 
 		ieee80211_update_bss_from_elems(local, non_tx_bss, &elems,
 						rx_status, beacon);
 	}
+#endif
 
 	return bss;
 }
@@ -281,9 +283,12 @@ void ieee80211_scan_rx(struct ieee80211_local *local, struct sk_buff *skb)
 			return;
 	}
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,8,0)
 	channel = ieee80211_get_channel_khz(local->hw.wiphy,
 					ieee80211_rx_status_to_khz(rx_status));
-
+#else
+	channel = ieee80211_get_channel(local->hw.wiphy, rx_status->freq);
+#endif
 	if (!channel || channel->flags & IEEE80211_CHAN_DISABLED)
 		return;
 
diff --git a/net/mac80211/sta_info.c b/net/mac80211/sta_info.c
index 1122532d7ad4..76b4942d9bad 100644
--- a/net/mac80211/sta_info.c
+++ b/net/mac80211/sta_info.c
@@ -405,6 +405,7 @@ struct sta_info *sta_info_alloc(struct ieee80211_sub_if_data *sdata,
 	if (sta_prepare_rate_control(local, sta, gfp))
 		goto free_txq;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,1,0)
 	sta->airtime_weight = IEEE80211_DEFAULT_AIRTIME_WEIGHT;
 
 	for (i = 0; i < IEEE80211_NUM_ACS; i++) {
@@ -415,6 +416,7 @@ struct sta_info *sta_info_alloc(struct ieee80211_sub_if_data *sdata,
 		sta->airtime[i].aql_limit_low = local->aql_txq_limit_low[i];
 		sta->airtime[i].aql_limit_high = local->aql_txq_limit_high[i];
 	}
+#endif
 
 	for (i = 0; i < IEEE80211_NUM_TIDS; i++)
 		sta->last_seq_ctrl[i] = cpu_to_le16(USHRT_MAX);
@@ -2123,22 +2125,28 @@ static void sta_stats_decode_rate(struct ieee80211_local *local, u32 rate,
 
 		sband = local->hw.wiphy->bands[band];
 		brate = sband->bitrates[rate_idx].bitrate;
+#if CFG80211_VERSION >= KERNEL_VERSION(4,0,0)
 		if (rinfo->bw == RATE_INFO_BW_5)
 			shift = 2;
 		else if (rinfo->bw == RATE_INFO_BW_10)
 			shift = 1;
 		else
+#endif
 			shift = 0;
 		rinfo->legacy = DIV_ROUND_UP(brate, 1 << shift);
 		break;
 		}
 	case STA_STATS_RATE_TYPE_HE:
+#if CFG80211_VERSION >= KERNEL_VERSION(4,19,0)
 		rinfo->flags = RATE_INFO_FLAGS_HE_MCS;
 		rinfo->mcs = STA_STATS_GET(HE_MCS, rate);
 		rinfo->nss = STA_STATS_GET(HE_NSS, rate);
 		rinfo->he_gi = STA_STATS_GET(HE_GI, rate);
 		rinfo->he_ru_alloc = STA_STATS_GET(HE_RU, rate);
 		rinfo->he_dcm = STA_STATS_GET(HE_DCM, rate);
+#else
+		WARN_ONCE(1, "HE not supported on this cfg80211 version\n");
+#endif
 		break;
 	}
 }
@@ -2210,6 +2218,7 @@ static void sta_set_tidstats(struct sta_info *sta,
 		tidstats->tx_msdu_failed = sta->status_stats.msdu_failed[tid];
 	}
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,0)
 	if (local->ops->wake_tx_queue && tid < IEEE80211_NUM_TIDS) {
 		spin_lock_bh(&local->fq.lock);
 		rcu_read_lock();
@@ -2221,6 +2230,7 @@ static void sta_set_tidstats(struct sta_info *sta,
 		rcu_read_unlock();
 		spin_unlock_bh(&local->fq.lock);
 	}
+#endif /* CFG80211_VERSION >= KERNEL_VERSION(4,18,0) */
 }
 
 static inline u64 sta_get_stats_bytes(struct ieee80211_sta_rx_stats *rxstats)
@@ -2330,6 +2340,7 @@ void sta_set_sinfo(struct sta_info *sta, struct station_info *sinfo,
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_TX_FAILED);
 	}
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,1,0)
 	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_RX_DURATION))) {
 		for (ac = 0; ac < IEEE80211_NUM_ACS; ac++)
 			sinfo->rx_duration += sta->airtime[ac].rx_airtime;
@@ -2346,6 +2357,7 @@ void sta_set_sinfo(struct sta_info *sta, struct station_info *sinfo,
 		sinfo->airtime_weight = sta->airtime_weight;
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_AIRTIME_WEIGHT);
 	}
+#endif
 
 	sinfo->rx_dropped_misc = sta->rx_stats.dropped;
 	if (sta->pcpu_rx_stats) {
@@ -2482,12 +2494,15 @@ void sta_set_sinfo(struct sta_info *sta, struct station_info *sinfo,
 		sinfo->expected_throughput = thr;
 	}
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,17,0)
 	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL)) &&
 	    sta->status_stats.ack_signal_filled) {
 		sinfo->ack_signal = sta->status_stats.last_ack_signal;
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL);
 	}
+#endif
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,20,0)
 	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL_AVG)) &&
 	    sta->status_stats.ack_signal_filled) {
 		sinfo->avg_ack_signal =
@@ -2496,12 +2511,15 @@ void sta_set_sinfo(struct sta_info *sta, struct station_info *sinfo,
 		sinfo->filled |=
 			BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL_AVG);
 	}
+#endif
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	if (ieee80211_vif_is_mesh(&sdata->vif)) {
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_AIRTIME_LINK_METRIC);
 		sinfo->airtime_link_metric =
 			airtime_link_metric_get(local, sta);
 	}
+#endif
 }
 
 u32 sta_get_expected_throughput(struct sta_info *sta)
diff --git a/net/mac80211/status.c b/net/mac80211/status.c
index 87b0b67e0f2b..79a1d55592c3 100644
--- a/net/mac80211/status.c
+++ b/net/mac80211/status.c
@@ -429,6 +429,9 @@ ieee80211_add_tx_radiotap_header(struct ieee80211_local *local,
 		pos += 2;
 	} else if (status && status->rate &&
 		   (status->rate->flags & RATE_INFO_FLAGS_HE_MCS)) {
+#if CFG80211_VERSION < KERNEL_VERSION(4,19,0)
+		WARN_ON_ONCE(1);
+#else
 		struct ieee80211_radiotap_he *he;
 
 		rthdr->it_present |= cpu_to_le32(1 << IEEE80211_RADIOTAP_HE);
@@ -499,6 +502,7 @@ ieee80211_add_tx_radiotap_header(struct ieee80211_local *local,
 		}
 
 		pos += sizeof(struct ieee80211_radiotap_he);
+#endif
 	}
 
 	if ((status && status->rate) || info->status.rates[0].idx < 0)
diff --git a/net/mac80211/trace.h b/net/mac80211/trace.h
index 68f84e3e0294..2d0b9a7bc0b4 100644
--- a/net/mac80211/trace.h
+++ b/net/mac80211/trace.h
@@ -45,10 +45,10 @@
 			__field(u32, center_freq2)
 #define CHANDEF_ASSIGN(c)							\
 			__entry->control_freq = (c) ? ((c)->chan ? (c)->chan->center_freq : 0) : 0;	\
-			__entry->freq_offset = (c) ? ((c)->chan ? (c)->chan->freq_offset : 0) : 0;	\
+			__entry->freq_offset = (c) ? ((c)->chan ? cfg80211_chan_freq_offset((c)->chan) : 0) : 0;	\
 			__entry->chan_width = (c) ? (c)->width : 0;			\
 			__entry->center_freq1 = (c) ? (c)->center_freq1 : 0;		\
-			__entry->freq1_offset = (c) ? (c)->freq1_offset : 0;		\
+			__entry->freq1_offset = (c) ? cfg80211_chandef_freq1_offset((c)) : 0;		\
 			__entry->center_freq2 = (c) ? (c)->center_freq2 : 0;
 #define CHANDEF_PR_FMT	" control:%d.%03d MHz width:%d center: %d.%03d/%d MHz"
 #define CHANDEF_PR_ARG	__entry->control_freq, __entry->freq_offset, __entry->chan_width, \
@@ -64,10 +64,10 @@
 
 #define MIN_CHANDEF_ASSIGN(c)								\
 			__entry->min_control_freq = (c)->chan ? (c)->chan->center_freq : 0;	\
-			__entry->min_freq_offset = (c)->chan ? (c)->chan->freq_offset : 0;	\
+			__entry->min_freq_offset = (c)->chan ? cfg80211_chan_freq_offset((c)->chan) : 0;	\
 			__entry->min_chan_width = (c)->width;				\
 			__entry->min_center_freq1 = (c)->center_freq1;			\
-			__entry->freq1_offset = (c)->freq1_offset;			\
+			__entry->freq1_offset = cfg80211_chandef_freq1_offset((c));			\
 			__entry->min_center_freq2 = (c)->center_freq2;
 #define MIN_CHANDEF_PR_FMT	" min_control:%d.%03d MHz min_width:%d min_center: %d.%03d/%d MHz"
 #define MIN_CHANDEF_PR_ARG	__entry->min_control_freq, __entry->min_freq_offset,	\
@@ -464,7 +464,7 @@ TRACE_EVENT(drv_bss_info_changed,
 		__entry->cqm_rssi_hyst = info->cqm_rssi_hyst;
 		__entry->channel_width = info->chandef.width;
 		__entry->channel_cfreq1 = info->chandef.center_freq1;
-		__entry->channel_cfreq1_offset = info->chandef.freq1_offset;
+		__entry->channel_cfreq1_offset = cfg80211_chandef_freq1_offset(&info->chandef);
 		__entry->arp_addr_cnt = info->arp_addr_cnt;
 		memcpy(__get_dynamic_array(arp_addr_list), info->arp_addr_list,
 		       sizeof(u32) * (info->arp_addr_cnt > IEEE80211_BSS_ARP_ADDR_LIST_LEN ?
@@ -1245,7 +1245,7 @@ TRACE_EVENT(drv_remain_on_channel,
 		LOCAL_ASSIGN;
 		VIF_ASSIGN;
 		__entry->center_freq = chan->center_freq;
-		__entry->freq_offset = chan->freq_offset;
+		__entry->freq_offset = cfg80211_chan_freq_offset(chan);
 		__entry->duration = duration;
 		__entry->type = type;
 	),
@@ -1615,26 +1615,26 @@ TRACE_EVENT(drv_switch_vif_chanctx,
 					sizeof(local_vifs[i].vif.vif_name));
 				SWITCH_ENTRY_ASSIGN(old_chandef.control_freq,
 						old_ctx->def.chan->center_freq);
-				SWITCH_ENTRY_ASSIGN(old_chandef.freq_offset,
-						old_ctx->def.chan->freq_offset);
+				local_vifs[i].old_chandef.freq_offset =
+					cfg80211_chan_freq_offset(vifs[i].old_ctx->def.chan);
 				SWITCH_ENTRY_ASSIGN(old_chandef.chan_width,
 						    old_ctx->def.width);
 				SWITCH_ENTRY_ASSIGN(old_chandef.center_freq1,
 						    old_ctx->def.center_freq1);
-				SWITCH_ENTRY_ASSIGN(old_chandef.freq1_offset,
-						    old_ctx->def.freq1_offset);
+				local_vifs[i].old_chandef.freq1_offset =
+					cfg80211_chandef_freq1_offset(&vifs[i].old_ctx->def);
 				SWITCH_ENTRY_ASSIGN(old_chandef.center_freq2,
 						    old_ctx->def.center_freq2);
 				SWITCH_ENTRY_ASSIGN(new_chandef.control_freq,
 						new_ctx->def.chan->center_freq);
-				SWITCH_ENTRY_ASSIGN(new_chandef.freq_offset,
-						new_ctx->def.chan->freq_offset);
+				local_vifs[i].new_chandef.freq_offset =
+					cfg80211_chan_freq_offset(vifs[i].new_ctx->def.chan);
 				SWITCH_ENTRY_ASSIGN(new_chandef.chan_width,
 						    new_ctx->def.width);
 				SWITCH_ENTRY_ASSIGN(new_chandef.center_freq1,
 						    new_ctx->def.center_freq1);
-				SWITCH_ENTRY_ASSIGN(new_chandef.freq1_offset,
-						    new_ctx->def.freq1_offset);
+				local_vifs[i].new_chandef.freq1_offset =
+					cfg80211_chandef_freq1_offset(&vifs[i].new_ctx->def);
 				SWITCH_ENTRY_ASSIGN(new_chandef.center_freq2,
 						    new_ctx->def.center_freq2);
 			}
diff --git a/net/mac80211/tx.c b/net/mac80211/tx.c
index 3bbe5907ba47..1b9e86089f1a 100644
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -1508,6 +1508,7 @@ void ieee80211_txq_purge(struct ieee80211_local *local,
 	spin_unlock_bh(&local->active_txq_lock[txqi->txq.ac]);
 }
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,0)
 void ieee80211_txq_set_params(struct ieee80211_local *local)
 {
 	if (local->hw.wiphy->txq_limit)
@@ -1525,6 +1526,7 @@ void ieee80211_txq_set_params(struct ieee80211_local *local)
 	else
 		local->hw.wiphy->txq_quantum = local->fq.quantum;
 }
+#endif /* CFG80211_VERSION >= KERNEL_VERSION(4,18,0) */
 
 int ieee80211_txq_setup_flows(struct ieee80211_local *local)
 {
@@ -1575,7 +1577,9 @@ int ieee80211_txq_setup_flows(struct ieee80211_local *local)
 	for (i = 0; i < fq->flows_cnt; i++)
 		codel_vars_init(&local->cvars[i]);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,0)
 	ieee80211_txq_set_params(local);
+#endif
 
 	return 0;
 }
diff --git a/net/mac80211/util.c b/net/mac80211/util.c
index 5294f684bb7b..161824cb3179 100644
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -962,10 +962,12 @@ _ieee802_11_parse_elems_crc(const u8 *start, size_t len, bool action,
 		u8 elen = elem->datalen;
 		const u8 *pos = elem->data;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 		if (check_inherit &&
 		    !cfg80211_is_element_inherited(elem,
 						   check_inherit))
 			continue;
+#endif
 
 		switch (id) {
 		case WLAN_EID_SSID:
@@ -1310,6 +1312,7 @@ static size_t ieee802_11_find_bssid_profile(const u8 *start, size_t len,
 					    u8 *bss_bssid,
 					    u8 *nontransmitted_profile)
 {
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	const struct element *elem, *sub;
 	size_t profile_len = 0;
 	bool found = false;
@@ -1370,6 +1373,9 @@ static size_t ieee802_11_find_bssid_profile(const u8 *start, size_t len,
 	}
 
 	return found ? profile_len : 0;
+#else
+	return 0;
+#endif
 }
 
 u32 ieee802_11_parse_elems_crc(const u8 *start, size_t len, bool action,
@@ -1443,6 +1449,7 @@ void ieee80211_regulatory_limit_wmm_params(struct ieee80211_sub_if_data *sdata,
 	    sdata->vif.type != NL80211_IFTYPE_STATION)
 		return;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,17,0)
 	rcu_read_lock();
 	chanctx_conf = rcu_dereference(sdata->vif.chanctx_conf);
 	if (chanctx_conf)
@@ -1455,20 +1462,33 @@ void ieee80211_regulatory_limit_wmm_params(struct ieee80211_sub_if_data *sdata,
 
 	rrule = freq_reg_info(sdata->wdev.wiphy, MHZ_TO_KHZ(center_freq));
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,13)
 	if (IS_ERR_OR_NULL(rrule) || !rrule->has_wmm) {
+#else
+	if (IS_ERR_OR_NULL(rrule) || !rrule->wmm_rule) {
+#endif
 		rcu_read_unlock();
 		return;
 	}
 
 	if (sdata->vif.type == NL80211_IFTYPE_AP)
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,13)
 		wmm_ac = &rrule->wmm_rule.ap[ac];
+#else
+		wmm_ac = &rrule->wmm_rule->ap[ac];
+#endif
 	else
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,13)
 		wmm_ac = &rrule->wmm_rule.client[ac];
+#else
+		wmm_ac = &rrule->wmm_rule->client[ac];
+#endif
 	qparam->cw_min = max_t(u16, qparam->cw_min, wmm_ac->cw_min);
 	qparam->cw_max = max_t(u16, qparam->cw_max, wmm_ac->cw_max);
 	qparam->aifs = max_t(u8, qparam->aifs, wmm_ac->aifsn);
 	qparam->txop = min_t(u16, qparam->txop, wmm_ac->cot / 32);
 	rcu_read_unlock();
+#endif
 }
 
 void ieee80211_set_wmm_default(struct ieee80211_sub_if_data *sdata,
@@ -2501,7 +2521,10 @@ int ieee80211_reconfig(struct ieee80211_local *local)
 		 * scan plan was currently running (and some scan plans may have
 		 * already finished).
 		 */
-		if (sched_scan_req->n_scan_plans > 1 ||
+		if (
+#if CFG80211_VERSION >= KERNEL_VERSION(4,4,0)
+		    sched_scan_req->n_scan_plans > 1 ||
+#endif
 		    __ieee80211_request_sched_scan_start(sched_scan_sdata,
 							 sched_scan_req)) {
 			RCU_INIT_POINTER(local->sched_scan_sdata, NULL);
